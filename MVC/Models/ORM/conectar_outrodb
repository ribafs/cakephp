== Criar uma nova conexão de banco de dados
https://book.cakephp.org/3.0/pt/orm/database-basics.html#gerenciando-conexoes

Configuring Connections

By default all table instances use the default database connection. If your application uses multiple database connections you will want to configure which tables use which connections. This is the defaultConnectionName() method:

namespace App\Model\Table;

use Cake\ORM\Table;

class ArticlesTable extends Table
{
    public static function defaultConnectionName() {
        return 'replica_db';
    }
}


Usando TableRegistry para a conexão

Configuring Table Objects

static Cake\ORM\TableRegistry::get($alias, $config)

When loading tables from the registry you can customize their dependencies, or use mock objects by providing an $options array:

$articles = TableRegistry::get('Articles', [
    'className' => 'App\Custom\ArticlesTable',
    'table' => 'my_articles',
    'connection' => $connectionObject,
    'schema' => $schemaObject,
    'entityClass' => 'Custom\EntityClass',
    'eventManager' => $eventManager,
    'behaviors' => $behaviorRegistry
]);



Suponha que queremos conectar a um outro banco de dados diferente do atual
Podemos criar outras conexões usando o arquivo config/app.php (veja ao final)
Também via código como abaixo, podemos criar quantas conexões com outros bancos quizermos

Vamos fazer isso no model clientes

Adicionar ao início do arquivo
use Cake\Datasource\ConnectionManager;

Inserir no intialize()

$dsn = 'mysql://root:password@localhost/my_database';
ConnectionManager::config('outro', ['url' => $dsn]);

Ao invés de config() agora do cake 3.6 usa-se setConfig()

Driver - mysql
User - root
Senha - root
Banco - crud

$dsn = 'mysql://root:root@localhost/crud';
ConnectionManager::config('outro', ['url' => $dsn]);

$connection = ConnectionManager::get('outro');

Agora vamos retornar algo do outro banco

$results = $connection->execute('SELECT * FROM clientes')->fetchAll('assoc');
debug($results);exit;

Podemos consultar também com:

$results = $connection
    ->execute('SELECT * FROM clientes WHERE id = :id', ['id' => 1])
    ->fetchAll('assoc');

Com query builder

$results = $connection
    ->newQuery()
    ->select('*')
    ->from('clientes')
    ->where(['email' => 'ribafs@gmail.com'])
    ->order(['nome' => 'DESC'])
    ->execute()
    ->fetchAll('assoc');

== Inserindo registros

$connection->insert('clientes', [
    'nome' => 'Tiago EF',
    'email' => 'tiago@tiago.com']);

== Update

$connection->update('clientes', ['nome' => 'Tiago EF2'], ['id' => 2]);

== Delete

$connection->delete('clientes', ['id' => 2]);

use Cake\Datasource\ConnectionManager;

ConnectionManager::config('terceiro', [
    'className' => 'Cake\Database\Connection',
    'driver' => 'Cake\Database\Driver\Mysql',
    'persistent' => false,
    'host' => 'localhost',
    'username' => 'root',
    'password' => 'root',
    'database' => 'cadastro',
    'encoding' => 'utf8',
    'timezone' => 'UTC',
    'cacheMetadata' => true,
]);


== Usando o config/app.php

    'Datasources' => [
        'default' => [
            'className' => 'Cake\Database\Connection',
            'driver' => 'Cake\Database\Driver\Mysql',
            'persistent' => false,
            'host' => 'localhost',
            //'port' => 'non_standard_port_number',
            'username' => 'root',
            'password' => 'root',
            'database' => 'cake36_code',
            'timezone' => 'UTC',
            'flags' => [],
            'cacheMetadata' => true,
            'log' => false,

            'quoteIdentifiers' => false,

            'url' => env('DATABASE_URL', null),
        ],

        'segundo' => [
            'className' => 'Cake\Database\Connection',
            'driver' => 'Cake\Database\Driver\Mysql',
            'persistent' => false,
            'host' => 'localhost',
            //'port' => 'non_standard_port_number',
            'username' => 'root',
            'password' => 'root',
            'database' => 'crude',
            'timezone' => 'UTC',
            'flags' => [],
            'cacheMetadata' => true,
            'log' => false,

            'quoteIdentifiers' => false,

            'url' => env('DATABASE_URL', null),
        ],

        /**
         * The test connection is used during the test suite.
         */
        'test' => [
            'className' => 'Cake\Database\Connection',
            'driver' => 'Cake\Database\Driver\Mysql',
            'persistent' => false,
            'host' => 'localhost',
            //'port' => 'non_standard_port_number',
            'username' => 'my_app',
            'password' => 'secret',
            'database' => 'test_myapp',
            //'encoding' => 'utf8mb4',
            'timezone' => 'UTC',
            'cacheMetadata' => true,
            'quoteIdentifiers' => false,
            'log' => false,
            //'init' => ['SET GLOBAL innodb_stats_on_metadata = 0'],
            'url' => env('DATABASE_TEST_URL', null),
        ],
    ],

== Executando consultas

Cake\Database\Connection::query($sql)

$stmt = $conn->query('UPDATE articles SET published = 1 WHERE id = 2');

$stmt = $conn->execute(
    'UPDATE articles SET published = ? WHERE id = ?',
    [1, 2]
);

$stmt = $conn->execute(
    'UPDATE articles SET published_date = ? WHERE id = ?',
    [new DateTime('now'), 2],
    ['date', 'integer']
);

Cake\Database\Connection::newQuery()

$query = $conn->newQuery();
$query->update('articles')
    ->set(['published' => true])
    ->where(['id' => 2]);
$stmt = $query->execute();

$query = $conn->newQuery();
$query->select('*')
    ->from('articles')
    ->where(['published' => true]);

foreach ($query as $row) {
    // Faz alguma coisa com a linha.
}


== Transações

$conn->begin();
$conn->execute('UPDATE articles SET published = ? WHERE id = ?', [true, 2]);
$conn->execute('UPDATE articles SET published = ? WHERE id = ?', [false, 4]);
$conn->commit();

Cake\Database\Connection::transactional(callable $callback)

$conn->transactional(function ($conn) {
    $conn->execute('UPDATE articles SET published = ? WHERE id = ?', [true, 2]);
    $conn->execute('UPDATE articles SET published = ? WHERE id = ?', [false, 4]);
});


== Contagem de registros

$rowCount = count($stmt);
$rowCount = $stmt->rowCount();

== Código e mensagem de erro

$code = $stmt->errorCode();
$info = $stmt->errorInfo();

Quoting

$conn->driver()->autoQuoting(true);


== Criando banco de dados

$dsn = 'mysql://root:password@localhost/';

$connection->query("CREATE DATABASE IF NOT EXISTS my_database");


