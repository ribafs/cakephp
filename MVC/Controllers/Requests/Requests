Requests
https://book.cakephp.org/3.0/en/core-libraries/httpclient.html

Http Client

class Cake\Http\Client(mixed $config = [])

CakePHP includes a basic but powerful HTTP client which can be used for making requests. It is a great way to communicate with webservices, and remote APIs.

Changed in version 3.3.0: Prior to 3.3.0 you should use Cake\Network\Http\Client.
Doing Requests

Doing requests is simple and straight forward. Doing a GET request looks like:

use Cake\Http\Client;

$http = new Client();

// Simple get
$response = $http->get('http://example.com/test.html');

// Simple get with querystring
$response = $http->get('http://example.com/search', ['q' => 'widget']);

// Simple get with querystring & additional headers
$response = $http->get('http://example.com/search', ['q' => 'widget'], [
  'headers' => ['X-Requested-With' => 'XMLHttpRequest']
]);

Doing POST and PUT requests is equally simple:

// Send a POST request with application/x-www-form-urlencoded encoded data
$http = new Client();
$response = $http->post('http://example.com/posts/add', [
  'title' => 'testing',
  'body' => 'content in the post'
]);

// Send a PUT request with application/x-www-form-urlencoded encoded data
$response = $http->put('http://example.com/posts/add', [
  'title' => 'testing',
  'body' => 'content in the post'
]);

// Other methods as well.
$http->delete(...);
$http->head(...);
$http->patch(...);



Sending Request Bodies

When dealing with REST API’s you often need to send request bodies that are not form encoded. Http\Client exposes this through the type option:

// Send a JSON request body.
$http = new Client();
$response = $http->post(
  'http://example.com/tasks',
  json_encode($data),
  ['type' => 'json']
);

The type key can either be a one of ‘json’, ‘xml’ or a full mime type. When using the type option, you should provide the data as a string. If you’re doing a GET request that needs both querystring parameters and a request body you can do the following:

// Send a JSON body in a GET request with query string parameters.
$http = new Client();
$response = $http->get(
  'http://example.com/tasks',
  ['q' => 'test', '_content' => json_encode($data)],
  ['type' => 'json']
);

Request Method Options

Each HTTP method takes an $options parameter which is used to provide addition request information. The following keys can be used in $options:

    headers - Array of additional headers
    cookie - Array of cookies to use.
    proxy - Array of proxy information.
    auth - Array of authentication data, the type key is used to delegate to an authentication strategy. By default Basic auth is used.
    ssl_verify_peer - defaults to true. Set to false to disable SSL certification verification (not recommended).
    ssl_verify_peer_name - defaults to true. Set to false to disable host name verification when verifying SSL certificates (not recommended).
    ssl_verify_depth - defaults to 5. Depth to traverse in the CA chain.
    ssl_verify_host - defaults to true. Validate the SSL certificate against the host name.
    ssl_cafile - defaults to built in cafile. Overwrite to use custom CA bundles.
    timeout - Duration to wait before timing out in seconds.
    type - Send a request body in a custom content type. Requires $data to either be a string, or the _content option to be set when doing GET requests.
    redirect - Number of redirects to follow. Defaults to false.

The options parameter is always the 3rd parameter in each of the HTTP methods. They can also be used when constructing Client to create scoped clients.
Authentication

Cake\Http\Client supports a few different authentication systems. Different authentication strategies can be added by developers. Auth strategies are called before the request is sent, and allow headers to be added to the request context.
Using Basic Authentication

An example of basic authentication:

$http = new Client();
$response = $http->get('http://example.com/profile/1', [], [
  'auth' => ['username' => 'mark', 'password' => 'secret']
]);

By default Cake\Http\Client will use basic authentication if there is no 'type' key in the auth option.



Accessing Response Headers

You can access headers through a few different methods. Header names are always treated as case-insensitive values when accessing them through methods:

// Get all the headers as an associative array.
$response->getHeaders();

// Get a single header as an array.
$response->getHeader('content-type');

// Get a header as a string
$response->getHeaderLine('content-type');

// Get the response encoding
$response->getEncoding();

// Get an array of key=>value for all headers
$response->headers;

Accessing Cookie Data

You can read cookies with a few different methods depending on how much data you need about the cookies:

// Get all cookies (full data)
$response->getCookies();

// Get a single cookie's value.
$response->getCookie('session_id');

// Get a the complete data for a single cookie
// includes value, expires, path, httponly, secure keys.
$response->getCookieData('session_id');

// Access the complete data for all cookies.
$response->cookies;

Checking the Status Code

Response objects provide a few methods for checking status codes:

// Was the response a 20x
$response->isOk();

// Was the response a 30x
$response->isRedirect();

// Get the status code
$response->getStatusCode();

// __get() helper
$response->code;


