Modelo de Aplicativo para a Intranet do DNOCS
Usando o Framework CakePKP 3

Criação de um aplicativo modelo contendo o componente Control e o plugin Twitter Bootstrap.

= Criar o aplicativo usando o script comp:

cd /var/www/html/intranet
comp modelo_dnocs

Ao finalizar já podemos ver pela web:
http://10.0.0.4/intranet/modelo_dnocs

= Configurar o banco
Banco - modelo_dnocs (script em anexo)
Tabelas - groups, users e permissions

cd modelo_dnocs
nano config/app.php

...
    'Datasources' => [
        'default' => [
            'className' => 'Cake\Database\Connection',
            'driver' => 'Cake\Database\Driver\Postgres',
            'persistent' => false,
            'host' => 'localhost',
            'username' => 'postgres',
            'password' => 'postgres',
            'database' => 'modelo_dnocs',
            'schema' => 'basico',
...


= Customizar o bootstrap_cli.php para criar os actions login() e logout() no Users:
config/bootstrap_cli.php

Adicione as 3 linhas na seção dos use:
use Cake\Event\Event;
use Cake\Event\EventManager;
use Cake\Utility\Hash;

Adicione ao final do arquivo o trecho seguinte:

EventManager::instance()->on(
    'Bake.beforeRender.Controller.controller',
    function (Event $event) {
        $view = $event->subject();
        if ($view->viewVars['name'] == 'Users') {
            // add the login and logout actions to the Users controller
            $view->viewVars['actions'] = [
                'login',
                'logout',
                'index',
                'view',
                'add',
                'edit',
                'delete'
            ];
        }
    }
);

= Traduzir o template do Bake para gerar o código em português do Brasil:
Traduzir as strings dos arquivos:

modelo_dnocs/vendor/cakephp/bake/src/Template/Bake/Template/login.ctp

Altere apenas as linhas abaixo
...
        <legend><?= __('Favor entrar seu login e senha') ?></legend>
        <?= $this->Form->input('username', array('label' => 'Login')) ?>
        <?= $this->Form->input('password', array('label' => 'Senha')) ?>
    </fieldset>
    <?= $this->Form->button(__('Acessar')); ?>
...

modelo_dnocs/vendor/cakephp/bake/src/Template/Bake/Template/index.ctp

Traduzir
List/Lista
New/Novo
Actions/Ações
View/Visualizar
Edit/Editar
Delete/Excluir
Are you sure you want to delete/Tem certeza de que deseja excluir o registro
previous/anterior
next/próximo

modelo_dnocs/vendor/cakephp/bake/src/Template/Bake/Template/view.ctp

Actions/Ações
Edit/Editar
Delete/Excluir
Are you sure you want to delete/Tem certeza de que deseja excluir o registro
New/Novo
List/Lista
Yes/Sim
No/Não
Related/Relacionado
Actions/Ações
View/Visualizar
Edit/Editar
Delete/Excluir
Are you sure you want to delete/Tem certeza de que deseja excluir o registro

modelo_dnocs/vendor/cakephp/bake/src/Template/Bake/Element/form.ctp

Actions/Ações
Delete/Excluir
Are you sure you want to delete/Tem certeza de que deseja excluir o registro
List/Lista
New/Novo
Submit/Enviar

De forma semelhante traduzir as strings do plugin TwitterBootstrap em
vendor/cakephp-brasil/twitter-bootstrap/src/Template/Bake/
E também:
vendor/cakephp/bake/src/Template/Bake/Element/Controller

IMPORTANTE: Idealmente criar um plugin para isso, pois toda vez que o aplicativo for
atualizado pelo composer a tradução será sobrescrita pelo original em inglês.


= Implementar o plugin Twitter Bootstrap:
composer require cakephp-brasil/twitter-bootstrap
bin/cake plugin load TwitterBootstrap

bin/cake bake all Users --theme TwitterBootstrap --force
bin/cake bake all Groups --theme TwitterBootstrap --force
bin/cake bake all Permissions --theme TwitterBootstrap --force

Para cada nova tabela adicionada executar:
bin/cake bake all NomeTabels --theme TwitterBootstrap

Adicionar ao src/View/AppView.php:
public function initialize()
{
    $this->loadHelper('Form', ['className' => 'TwitterBootstrap.Form']);
}

Add ao initialize() do AppController:

		$this->set('project_name', 'Título do Aplicativo');
		$this->viewBuilder()->theme('TwitterBootstrap');
        $loguser = $this->request->session()->read('Auth.User');    
        $loguser = $loguser['username'];
        $this->set('loguser',$loguser);

Copiar o element topmenu.ctp da pasta 1recursos para src/Template/Element

Editar o
/vendor/cakephp-braisl/twitter-bootstrap/src/Template/Layout/default.ctp
E mudar a linha:
   	$default_nav_bar_right = ROOT.DS.'src'.DS.'Template'.DS.'Element'.DS.'nav-bar-right.ctp';

Para:
  	$default_nav_bar_right = ROOT.DS.'src'.DS.'Template'.DS.'Element'.DS.'topmenu.ctp';

ainda no default.ctp, Comentar o trecho:

	      	$default_nav_bar_right = ROOT.DS.'src'.DS.'Template'.DS.'Element'.DS.'nav-bar-right.ctp';
	      	/*
	      	if (file_exists($default_nav_bar_right)) {
	      		ob_start();
	      		include $default_nav_bar_right;
	      		echo ob_get_clean();
	      	}
	      	else {
	      		echo $this->element('nav-bar-right');
	      	}*/

Para publicar todas as views automaticamente executar:
bin/cake TwitterBootstrap.publish

Liberar o action add no beforeFilter() do AppController e cadastrar os grupos e usuários.
$this->Auth->allow(['index','add']);


== Configure as rotas para Users/index
nano config/routes.php


== Implementar a criptografia de senhas com bcrypt

Editar o src/Model/Entity/User.php

Adicione a linha:
use Cake\Auth\DefaultPasswordHasher;

Adicione ao final da classe o método:
    protected function _setPassword($password)
    {
        return (new DefaultPasswordHasher)->hash($password);
    }


http://10.0.0.4/intranet/modelo_dnocs/groups/add

E cadastre os grupos e usuários

Após comente a linha abaixo para que o aplicativo como um todo não possa ser acessado pelo público, somente por usuários logados.
//$this->Auth->allow(['index','add']);


= Copie o componente ControlComponente da pasta 1recursos para a
src/Controller/Component

=Deixe o AppController assim:

<?php
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\Event;

class AppController extends Controller
{

    public function initialize()
    {
        parent::initialize();

        $this->loadComponent('RequestHandler');
        $this->loadComponent('Flash');
        
		$this->loadComponent('Control'); // Own component

        $this->loadComponent('Auth', [
            'loginRedirect' => [
                'controller' => 'Clientes',
                'action' => 'index',
				'base' => false
            ],
            'logoutRedirect' => [
                'controller' => 'Users',
                'action' => 'login'
            ],
			'unauthorizedRedirect' => [
				'controller' => 'Users',
				'action' => 'login',
				'prefix' => false
			],
		    'authError' => 'Faça login antes',
		    'storage' => 'Session'
        ]);
        
        // Twitter Bootstrap
		$this->set('project_name', 'DNOCS - Aplicativo Modelo');
		$this->viewBuilder()->theme('TwitterBootstrap');
        $loguser = $this->request->session()->read('Auth.User');    
        $loguser = $loguser['username'];
        $this->set('loguser',$loguser);                
    }

    public function beforeFilter(\Cake\Event\Event $event) {
	    parent::beforeFilter($event);

		$user = $this->request->session()->read('Auth.User');
		$group=$user['group_id'];

		$controller = $this->request->controller;
		$action = $this->request->action;

		//$this->Auth->allow(['index','add']);// Descomentando dá acesso total aos actions index e view

		if(isset($group)){
			$this->Control->populate('Supers');// Cadastrar todos as permissões para o grupo Supers
			$this->Control->populate('Admins');// Permissão para para os usuários do grupo Admins
			$this->Control->populate('Managers');// Cadastrar todos as permissões grupo Managers
			// Após o primeiro login no aplicativo pode comentar as três linhas acima
		}

		if($action != 'login' && $action != 'logout'){
			if(isset($group) && $this->Control->access($controller,$action,$group)==false){	
				$this->Flash->error(__('Como usuário "'.$user['username'].'", você não tem permissão para acessar '.$controller.'/'.$action));
				return $this->redirect($this->referer());
			}
		}
	}

    public function beforeRender(Event $event)
    {
        if (!array_key_exists('_serialize', $this->viewVars) &&
            in_array($this->response->type(), ['application/json', 'application/xml'])
        ) {
            $this->set('_serialize', true);
        }
    }
}

Descomente a linha abaixo no beforeFilter():
$this->Auth->allow(['index','add']);

Acesse:
http://10.0.0.4/intranet/modelo_dnocs/users
Adicione os 4 usuários: super, admin, manager e user

Comente novamente a linha:
//$this->Auth->allow(['index','add']);

Acesse o aplicativo e teste com os 4 usuários as várias seções do aplicativo.


Observe que como está os registros na tabela permissions somente serão cadastrados quando for feito o primeiro login no sistema.
Após o primeiro login e execução do sistema, pode comentar 


Agora temos 4 grupos:

Supers - poder total, acessam tudo do aplicativo
Admins -acesso total às tabelas administrativas: groups, users e permissions
Managers - acessam tudo que Admins não acessam: todas as tabelas diferentes de groups, users e permissions
Users - inicialmente tem acesso somente ao login e logout. Para que possa acessar qualquer outro action precisa que seja cadastrado nos actions respectivos. Basta acessar como um Supers ou Admins e cadastrar suas permissões.

Tomar cuidado, pois os grupos são referenciados pelo group_id

Caso precise de mais grupos precisará efetuar as adaptações no componente Group, que me parece estar simples.



